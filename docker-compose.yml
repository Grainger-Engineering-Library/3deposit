version: '3'

services:

  deposit-form:
    build: ./services/form/
    networks:
      - proxy
    container_name: deposit-form
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=PathPrefix:/"
      - "traefik.backend=deposit-form"
      - "traefik.port=80"
      - "traefik.docker.network=proxy"
      - "traefik.frontend.passHostHeader=true"
    restart: always

  postgres:
    container_name: postgres
    image: postgres:10
    networks:
        - gateway_internal
    # volumes:
    #     - ./pg_data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"
    restart: always

  admin:
    build: ./services/admin/
    networks:
      - proxy
    container_name: admin
    labels:
      - "traefik.enable=true"
      - "traefik.backend=admin"
      - "traefik.port=80"
      - "traefik.docker.network=proxy"
      - "traefik.frontend.redirect.regex=^(.*)/admin$$"
      - "traefik.frontend.redirect.replacement=$$1/admin/"
      - "traefik.frontend.rule=PathPrefix:/admin;ReplacePathRegex: ^/admin/(.*) /$$1"
      - "traefik.frontend.passHostHeader=true"
    restart: always

  gateway:
    build: ./services/gateway/
    container_name: gateway
    links:
        - postgres
    depends_on:
        - postgres
    networks:
      - gateway_internal
      - proxy
    command: bash -c "pipenv run python init_db.py && pipenv run gunicorn gateway:init_app -w 4 -b 0.0.0.0:8080 -t 600 --worker-class aiohttp.GunicornWebWorker"
    # command: bash -c "pipenv run gunicorn gateway:init_app -w 4 -b 0.0.0.0:8080 -t 300 --worker-class aiohttp.GunicornWebWorker"
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=PathPrefix:/api"
      - "traefik.backend=gateway"
      - "traefik.port=8080"
      - "traefik.docker.network=proxy"
    volumes:
      - ./services/gateway/data:/gateway/data
    restart: always
    env_file:
      - keys.env


  reverse-proxy:
      container_name: reverse-proxy
      image: traefik:1.7
      command: --docker # --api
      ports:
        - "80:80"
        - "443:443"
        # - "8080:8080" # The Web UI (enabled by --api)
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./traefik.toml:/traefik.toml
        # map host cert to container
        - /etc/pki/tls/:/etc/traefik/tls/
      networks:
        - proxy
      restart: always

  minio-server:
    container_name: minio-server
    image: minio/minio:RELEASE.2019-10-02T21-19-38Z
    networks:
      - minio_internal
    ports:
      - 9000:9000
    volumes:
      - ./services/minio/data:/data
    env_file:
      - keys.env
    command: server /data
    labels:
      - "traefik.enable=false"
    restart: always

  minio-service:
    build: ./services/minio/
    container_name: minio-service
    depends_on:
      - minio-server
    links:
      - minio-server
    networks:
      - minio_internal
      - gateway_internal
    command: pipenv run gunicorn -w 4 -b 0.0.0.0:5000 -t 600 minio-service:create_app()
    labels:
      - "traefik.enable=false"
    restart: always

  mongo-server:
    image: mongo:4
    container_name: mongo-server
    restart: always
    networks:
      - mongo_internal
    env_file:
      - keys.env
    volumes:
      - ./services/mongo/data:/data
    labels:
      - "traefik.enable=false"
    restart: always

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - mongo_internal
  #     - proxy
  #   environment:
  #     ME_CONFIG_MONGODB_SERVER: mongo-server
  #   labels:
  #     - "traefik.enable=false"
  #   env_file:
  #     - keys.env

  mongo-service:
    build: ./services/mongo/
    container_name: mongo-service
    depends_on:
      - mongo-server
    links:
      - mongo-server
    networks:
      - mongo_internal
      - gateway_internal
    env_file:
      - keys.env
    command: pipenv run gunicorn -w 4 -b 0.0.0.0:5000 mongo-service:create_app()
    labels:
      - "traefik.enable=false"
    restart: always

  sketchfab-service:
    build: ./services/sketchfab/
    container_name: sketchfab-service
    networks:
      - gateway_internal
    command: pipenv run gunicorn -w 4 -b 0.0.0.0:5000 sketchfab-service:app
    labels:
      - "traefik.enable=false"
    restart: always

  aws-service:
    build: ./services/aws/
    container_name: aws-service
    networks:
      - gateway_internal
    command: pipenv run gunicorn -w 4 -b 0.0.0.0:5000 -t 600 aws-service:app
    labels:
      - "traefik.enable=false"
    restart: always

  vimeo-service:
    build: ./services/vimeo/
    container_name: vimeo-service
    networks:
      - gateway_internal
    command: pipenv run gunicorn -w 4 -b 0.0.0.0:5000 -t 600 vimeo-service:app
    labels:
      - "traefik.enable=false"
    restart: always

  metadata-service:
    build: ./services/metadata/
    container_name: metadata-service
    networks:
      - gateway_internal
    env_file:
      - keys.env
    command: pipenv run gunicorn -w 4 -b 0.0.0.0:5000 metadata-service:app
    labels:
      - "traefik.enable=false"
    restart: always


networks:
    proxy:
        external: true
    gateway_internal:
        external: false
    minio_internal:
        external: false
    mongo_internal:
        external: false
